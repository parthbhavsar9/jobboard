# -*- coding: utf-8 -*-
"""
Created on Thu Aug 11 13:42:57 2022

@author: RAM
"""

import requests
import json

url = "http://127.0.0.1:8080/calculation"

payload = json.dumps({
  "data": ""
})
headers = {
  'Content-Type': 'application/json'
}

response = requests.request("POST", url, headers=headers, data=payload)

output = response.text

json_object = json.loads(output)

print(json_object)

